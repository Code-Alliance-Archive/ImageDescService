<%= javascript_include_tag 'tiny_mce/tiny_mce' %>
<%= javascript_include_tag :defaults %>
<%= stylesheet_link_tag 'poet' %>

<style type="text/css">
  .toolbar  { position:fixed; top:0px; left:1px; padding:1px; font-family:Arial;  background:#fffea1; border:1px solid #fc0; font-size: 80%;}
  .original_image {font-family:Arial; font-size: 80%; font-weight: bold;}
  </style>
  
  <div class="toolbar" style="width:350px;">
    <b><%= @book.title %></b>
 </div>
  </div>
<div class='image-editing-controls' template="<%= h generate_html(:partial => 'edit_book/edit_image_form')%>" book-id="<%= @book.id %>"></div>

<%=yield%>
<% DynamicImage.includes(:dynamic_descriptions).where(:book_id => @book.id).each do |dynamic_image| %>
  <% history_fragment = raw(generate_html(:partial => 'dynamic_images/show_history_fragment', :locals => {:descriptions => dynamic_image.dynamic_descriptions}).force_encoding("UTF-8")) %>
  <div class='image-editing-description-<%= dynamic_image.id %>' image-original-src ="<%= dynamic_image.image_source(@host)%>" image-src="<%= dynamic_image.medium_source(@host) %>" image-id="<%= dynamic_image.id %>" image-xml-id="<%= dynamic_image.xml_id %>" description-text="<%= history_fragment.force_encoding("UTF-8")  %>"></div>
<% end %>

<script type="text/javascript">
  // TODO: move this into the application.js file when we move away from frames
  // Inject DHTML into each image with previous description and current description
  $imageEditingControlHtml = $('.image-editing-controls', top.frames['content'].document).attr('template');
  if($imageEditingControlHtml != null) {
    $bookId = $('.image-editing-controls', top.frames['content'].document).attr('book-id');
    $imageEditingControlHtml = $imageEditingControlHtml.replace(/\\n/g, "\n");
    $('img', top.frames['content'].document).each(function(index, item) {
      currentImageNode = $(item);
      // Grab _edit_image_form.html.haml template HTML and inject in the appropriate place
      $newDiv = $($imageEditingControlHtml);
      
      $('form.description-form', $newDiv).bind('ajax:success',    function(data, html, status) {
        notification = $('.description-result', $(this).parent());
        
        notification = $(notification);
        notification.html("The description has been saved.");
        notification.css('fontWeight', 'bold');
        notification.css('color', 'green');

        // add in the actual description
        descriptionInput = $('.description-text-area', $(this).parent().parent());
        descriptionInput = $(descriptionInput);
        descriptionInput.val('');
        $('.imageDescriptions', $(this).parent().parent()).append($(html.body));
      })
      $('form.description-form', $newDiv).bind('ajax:error',    function(data, html, status) {
        notification = $('.description-result', $(this).parent());
        notification = $(notification);
        if($.parseJSON(html.responseText) != null) {
          notification.html($.parseJSON(html.responseText).join(", "));
        }
        else {
          notification.html("An error has occurred.");
        }
        notification.css('fontWeight', 'bold');
        notification.css('color', 'red');
        
      })
      
      
      $('.toggle-tiny-mce', $newDiv).click(function() {
        $bodyNode = $("textarea[name='dynamic_description[body]']", $(this).parent());
        if($bodyNode != null) {
          tinyMCE.execCommand('mceAddControl', false, $bodyNode.attr('id'));
        }
        return false;
      });
      
      $imgId = $(item).attr('img-id');
      $imgXmlId = $(item).attr('image-xml-id');
      
      $original = $(item).attr('original');
      
      // Grab meta-information about this dynamic image and adjust the appropriate DIV to reflect that
      $dataNode = $(".image-editing-description-" + $imgId, top.frames['content'].document);
      if($dataNode != null) {
        // Manipulate the new node ($newDiv) before we insert it in the DOM to have data related to the current image plus the previous descriptions
        $dataNode = $($dataNode);
        $imageId = $dataNode.attr('image-id');
        $imageSource = $dataNode.attr('image-src');
        $imageOriginalSource = $dataNode.attr('image-original-src');
        currentImageNode.attr('src', $imageSource);

        $descriptionText = $dataNode.attr('description-text');
        if($descriptionText != null) {
          $descriptionText = $descriptionText.replace(/\\n/g, "\n");
        }
        
        // Update the image description box DIV class so that it reflects the image ID in question
        $('.imageDescBox', $newDiv).html($descriptionText);
        $('.imageDescBox', $newDiv).addClass('imageDescBox-' + $imageId);
          //console.log()
        orginalSizeLink = $('.original_size_link', $newDiv);
        if(orginalSizeLink != null) {
          orginalSizeLink.attr('href', $imageOriginalSource);
          orginalSizeLink.attr('class', 'original_image');
        }
        $('.image_number_text', $newDiv).html('Image Number: ' + $imageId);
        // If this is the first instance of the img, let them create new descriptions
        if($original == '1') {
        // Update the hidden variable with the book ID so it has the correct book ID
        $("input[name='dynamic_description[book_id]']", $newDiv).attr('value', $bookId);
        // Update the hidden variable with the dynamic_image_id so it has the correct dynamic_image_id
        $("input[name='dynamic_description[dynamic_image_id]']", $newDiv).attr('value', $imageId);
        $bodyTextArea = $("textarea[name='dynamic_description[body]']", $newDiv);
        $bodyTextArea.attr('id', "dynamic_description_body_" + $imageId);
        $bodyTextArea.click(function() {
          // Remove any success/failure alert messaging; note that this will remove *all* alerts because of the parents() method call
          $('.description-result', $('.outer-dynamic-description-div', $bodyTextArea.parents())).html('');
        });
      }
        else {
          // Hide the area where you can enter new descriptions
          $('.new-description', $newDiv).hide();
          $('.duplicate-image', $newDiv).show();
          $('.duplicate-image-id', $newDiv).replaceWith($imgId);
        }
      }
      $newDiv.insertAfter(item);
    })
  }
  
  
  tinyMCE.init({
     // General options
     mode : "none",
     theme : "advanced",
     plugins : "autolink,lists,advlist, pagebreak,style,table,contextmenu",

     // Theme options
     theme_advanced_buttons1 : "bold,italic,underline,strikethrough,|,bullist,numlist,|,formatselect",
     theme_advanced_buttons2 : "tablecontrols,|,link,unlink",
     theme_advanced_buttons3 : "undo,redo",
     theme_advanced_toolbar_location : "top",
     theme_advanced_toolbar_align : "left",
     theme_advanced_statusbar_location : "bottom"
  });
  
  
</script>
<script type="text/javascript" src="https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

