# encoding: utf-8
<%= javascript_include_tag :defaults %>
<%= javascript_include_tag 'ckeditor/ckeditor' %>
<%= javascript_include_tag 'ckeditor/adapters/jquery' %>
<%= stylesheet_link_tag 'poet' %>
<script type="text/x-mathjax-config">
      MathJax.Hub.Config({
        jax: ["input/AsciiMath","input/MathML","output/SVG","output/NativeMML"],
        extensions: ["asciimath2jax.js","MathMenu.js","MathZoom.js","toMathML.js"]
      });
    </script>

<style type="text/css">
  .toolbar  { position:fixed; top:0px; left:1px; padding:1px; font-family:Arial;  background:#fffea1; border:1px solid #fc0; font-size: 80%;}
  .original_image {font-family:Arial; font-size: 80%; font-weight: bold;}
  .svg_node {padding: 10px;}
  </style>
  
  <div class="toolbar" style="width:350px;">
    <b><%= @book.title %></b>
 </div>
  </div>
<div class='image-editing-controls' template="<%= h generate_html(:partial => 'edit_book/edit_image_form')%>" book-id="<%= @book.id %>"></div>

<%=yield%>
<div id='result'></div>

<% DynamicImage.includes(:dynamic_descriptions).where(:book_id => @book.id, :book_fragment_id => @book_fragment.id).each do |dynamic_image| %>
  
  <% description = dynamic_image.dynamic_descriptions.last %>
  <% description_body = description && description.body ? description.body.force_utf8 : '' %>
  <div class='image-editing-description-<%= dynamic_image.id.to_s.force_encoding("UTF-8") %>' image-original-src ="<%= dynamic_image.image_source(@host).to_s.force_encoding("UTF-8")%>" image-src="<%= dynamic_image.medium_source(@host).to_s.force_encoding("UTF-8") %>" image-id="<%= dynamic_image.id.to_s.force_encoding("UTF-8") %>" image-xml-id="<%= dynamic_image.xml_id.to_s.force_encoding("UTF-8") %>" description-body="<%= description_body %>" description-summary="<%= description ? description.summary : '' %>" description-sld="<%= description ? description.simplified_language_description : '' %>" description-annotation="<%= description ? description.annotation : '' %>" description-tactile-src="<%= description ? description.tactile_src : '' %>" description-tactile-tour="<%= description ? description.tactile_tour : '' %>" description-tas="<%= description ? description.target_age_start : '' %>" description-tae="<%= description ? description.target_age_end : '' %>" description-tgs="<%= description ? description.target_grade_start : '' %>" description-tge="<%= description ? description.target_grade_end : '' %>"></div>
<% end %>

<script type="text/javascript">

  // TODO: move this into the application.js file when we move away from frames
  // First load up the HTML file and inject it into the DOM
  $bookUrl = '<%= raw @book_url %>';
  //console.log("ESH: Have a url to load up of " + $bookUrl);
  $.get($bookUrl, function(data) {
    $('#result').html(data);
    //console.log("ESH: after loading in the HTML data");

  // Inject DHTML into each image with previous description and current description
  
  var ckeditorConfig =
      {
        toolbar :
        [
            { name: 'basicstyles', items : [ 'Bold','Italic','Underline' ] },
            { name: 'paragraph', items : [ 'NumberedList','BulletedList' ] },
            { name: 'styles', items : [ 'Format' ] },
            { name: 'insert', items : [ 'Table','Link','Unlink' ] },
            { name: 'tools', items : [ 'Undo', 'Redo', '-', 'Source','Maximize','Preview' ] }
        ]
      };
  $imageEditingControlHtml = $('.image-editing-controls', top.frames['content'].document).attr('template');
  my_instances = [];
  if($imageEditingControlHtml != null) {
    $bookId = $('.image-editing-controls', top.frames['content'].document).attr('book-id');
    $imageEditingControlHtml = $imageEditingControlHtml.replace(/\\n/g, "\n");
    $('img', top.frames['content'].document).each(function(index, item) {
      currentImageNode = $(item);
      // Grab _edit_image_form.html.haml template HTML and inject in the appropriate place
      $newDiv = $($imageEditingControlHtml);
      
      $('form.description-form', $newDiv).bind('ajax:success',    function(data, html, status) {
        notification = $('.description-result', $(this).parent());
        
        notification = $(notification);
        notification.html("The description has been saved.");
        notification.css('fontWeight', 'bold');
        notification.css('color', 'green');
      })
      $('form.description-form', $newDiv).bind('ajax:error',    function(data, html, status) {
        notification = $('.description-result', $(this).parent());
        notification = $(notification);
        if($.parseJSON(html.responseText) != null) {
          notification.html($.parseJSON(html.responseText).join(", "));
        }
        else {
          notification.html("An error has occurred.");
        }
        notification.css('fontWeight', 'bold');
        notification.css('color', 'red');
      })

      // Make it so that when you click a text area the first time, we enable tinyMCE.  At the same time disable the enable tiny MCE so it doesn't try to enable it multiple times
      function enableCKEditor(response) {

        $(response.target).ckeditor(ckeditorConfig);

        item.off("click", enableCKEditor);
      }
      $('.enable-tiny-mce', $newDiv).on("click", enableCKEditor);

      $('.collapsible', $newDiv).each(function(index, item) {
        triggerElement = $("<a href='#'>" + $(item).attr('trigger') + "</a>");
        triggerElement.insertBefore(item);
      
        triggerElement.click(function() {
          $(item).toggle("slow");
        return false;
      });
      });

      $('.toggle-math-desc', $newDiv).click(function() {
        $bodyNode = $(".math_desc_div", $(this).parent());
        if($bodyNode != null) {
          $bodyNode.toggle();
        }
        return false;
      });
      
      $('.toggle-preview', $newDiv).click(function() {
        $bodyNode = $("textarea[name='dynamic_description[body]']", $(this).parent());
        var descriptionNode = $("textarea[name='dynamic_description[body]']", $(this).parent().parent());
        var previewNode = $(".preview", $(this).parent().parent());
        previewNode.html($(descriptionNode).val());
        $(previewNode).toggle();

        if(my_instances[$bodyNode.attr('id')] != null) {
            $(descriptionNode.next()).toggle();
        }

        if(!descriptionNode.next().hasClass('cke_skin_kama')) {
            var editor = CKEDITOR.replace( $bodyNode.attr('id'),ckeditorConfig);
            my_instances[$bodyNode.attr('id')] = editor;
        }
        if(descriptionNode.next().hasClass('cke_skin_kama')) {
          previewNode.html(my_instances[$bodyNode.attr('id')].getData());
          MathJax.Hub.Typeset($('.preview',$(this).parent())[0]);
        }

        var mathButton = $(".toggle-math-desc", $(this).parent().parent());
        $(mathButton).toggle();
        if($(previewNode).is(":visible")) {
            this.innerText = "Edit";
        } else {
            this.innerText = "Preview";
        }

        return false;
      });

      $('.equation-editor', $newDiv).keyup(function() {
        var $editorString = $('.equation-editor', $(this).parent())[0].value;
        var $svg_node = $('.svg_node',$(this).parent());
         $svg_node[0].innerHTML = '`' + $editorString + '`';
        MathJax.Hub.Typeset($svg_node[0]);
      });

      $('.add-to-desc', $newDiv).click(function() {
        var svg_node = $('.svg_node',$(this).parent())[0];
        var text_area = $('.equation-editor',$(this).parent())[0];
        var description_node = $("textarea[name='dynamic_description[body]']", $(this).parent().parent())[0];
        var my_editor = my_instances[description_node.id];

        MathJax.Hub.Queue(function() {
          var jaxen = MathJax.Hub.getAllJax(svg_node);
          toMathML(jaxen[0], function(mml) {
              if (my_editor.mode == 'wysiwyg') {
                  my_editor.insertHtml(mml);
              }
              else
                alert('You must exit View Source mode');
          })} );
          return false;
      });

      $('.add-description', $newDiv).click(function() {
          $('.new-description', $(this).parent().parent()).show();
          $(this).hide();
          $('.toggle-preview', $(this).parent().parent()).click();
      });
      
      $imgId = $(item).attr('img-id');
      $imgXmlId = $(item).attr('image-xml-id');
      $altText = $(item).attr('alt');
      $original = $(item).attr('original');
      
      // Grab meta-information about this dynamic image and adjust the appropriate DIV to reflect that
      $dataNode = $(".image-editing-description-" + $imgId, top.frames['content'].document);
      if($dataNode != null) {
        // Manipulate the new node ($newDiv) before we insert it in the DOM to have data related to the current image plus the previous descriptions
        $dataNode = $($dataNode);
        $imageId = $dataNode.attr('image-id');
        $imageSource = $dataNode.attr('image-src');
        $imageOriginalSource = $dataNode.attr('image-original-src');
        currentImageNode.attr('src', $imageSource);

        $descriptionBody = $dataNode.attr('description-body');
        if($descriptionBody != "") {
          $descriptionBody = $descriptionBody.replace(/\\n/g, "\n");
        } else {
            $('.add-description-div', $newDiv).show();
            $('.new-description', $newDiv).hide();
        }
        //console.log("Have $descriptionBody="+$descriptionBody);
        $('textarea[name="dynamic_description[body]"]', $newDiv).val($descriptionBody);
        $(".preview", $newDiv).html($descriptionBody);
        $descriptionSummary = $dataNode.attr('description-summary');
        if($descriptionSummary != null) {
          $descriptionSummary = $descriptionSummary.replace(/\\n/g, "\n");
        }
        $('textarea[name="dynamic_description[summary]"]', $newDiv).val($descriptionSummary);
        $descriptionSld = $dataNode.attr('description-sld');
        if($descriptionSld != null) {
          $descriptionSld = $descriptionSld.replace(/\\n/g, "\n");
        }
        $('textarea[name="dynamic_description[simplified_language_description]"]', $newDiv).val($descriptionSld);
        $descriptionAnnotation = $dataNode.attr('description-annotation');
        if($descriptionAnnotation != null) {
          $descriptionAnnotation = $descriptionAnnotation.replace(/\\n/g, "\n");
        }
        $('textarea[name="dynamic_description[annotation]"]', $newDiv).val($descriptionAnnotation);

        $('select[name="dynamic_description[target_age_start]"]', $newDiv).val($dataNode.attr('description-tas'));
        $('select[name="dynamic_description[target_age_end]"]', $newDiv).val($dataNode.attr('description-tae'));
        $('select[name="dynamic_description[target_grade_start]"]', $newDiv).val($dataNode.attr('description-tgs'));
        $('select[name="dynamic_description[target_grade_end]"]', $newDiv).val($dataNode.attr('description-tge'));

        $descriptionTactileSrc = $dataNode.attr('description-tactile-src');
        $('textarea[name="dynamic_description[tactile_src]"]', $newDiv).val($descriptionTactileSrc);
        $descriptionTactileTour = $dataNode.attr('description-tactile-tour');
        $('textarea[name="dynamic_description[tactile_tour]"]', $newDiv).val($descriptionTactileTour);

        // show alt text
        if($altText) {
            $('.alt_text', $newDiv).html('Alt Text: ' + $altText);
        } else {
            $('.alt_text', $newDiv).hide();
        }
        
        orginalSizeLink = $('.original_size_link', $newDiv);
        if(orginalSizeLink != null) {
          orginalSizeLink.attr('href', $imageOriginalSource);
          orginalSizeLink.attr('class', 'original_image');
        }
        $('.image_number_text', $newDiv).html('Image Number: ' + $imageId);
        // If this is the first instance of the img, let them create new descriptions
        if($original == '1') {
        // Update the hidden variable with the book ID so it has the correct book ID
        $("input[name='dynamic_description[book_id]']", $newDiv).attr('value', $bookId);
        // Update the hidden variable with the dynamic_image_id so it has the correct dynamic_image_id
        $("input[name='dynamic_description[dynamic_image_id]']", $newDiv).attr('value', $imageId);
        $bodyTextArea = $("textarea[name='dynamic_description[body]']", $newDiv);
        $bodyTextArea.attr('id', "dynamic_description_body_" + $imageId);
        $bodyTextArea.click(function() {
          // Remove any success/failure alert messaging; note that this will remove *all* alerts because of the parents() method call
          $('.description-result', $('.outer-dynamic-description-div', $bodyTextArea.parents())).html('');
        });
      }
        else {
          // Hide the area where you can enter new descriptions
          $('.new-description', $newDiv).hide();
          $('.duplicate-image', $newDiv).show();
          $('.duplicate-image-id', $newDiv).replaceWith($imgId);
        }
      }
      $newDiv.insertAfter(item);
      $(item).appendTo($('.image_slot', $newDiv));
      
    })

  }
  $.getScript("https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML");
  });
  
  
  <!-- groups.google.com/d/topic/mathjax-users/unL8IjcrTto/discussion -->
    function toMathML(jax, callback) {
      var mml;
      try {
        mml = jax.root.toMathML("");
      } catch(err) {
        if (!err.restart) { throw err; }
        return MathJax.Callback.After([toMathML, jax, callback], err, restart);
      }
      MathJax.Callback(callback)(mml);
    }
  
  
</script>

